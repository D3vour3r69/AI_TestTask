from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from PIL import Image
import io
import logging
import torch
import torchvision.transforms as transforms
import asyncio

from app.model_loader import model_loader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="CIFAR-10 Classification API",
    description="–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    version="1.0.0"
)

# –ü—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
transform = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])


@app.on_event("startup")
async def startup():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ API...")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    model_loader.load_model()


@app.get("/")
async def root():
    return {"status": "OK", "model_loaded": model_loader.is_loaded}


@app.get("/health")
async def health():
    return {
        "status": "healthy" if model_loader.is_loaded else "error",
        "model_loaded": model_loader.is_loaded
    }


@app.post("/predict")
async def predict(image: UploadFile = File(...)):
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    if not model_loader.is_loaded:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    try:
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        contents = await image.read()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        def process_image():
            img = Image.open(io.BytesIO(contents)).convert('RGB')
            tensor = transform(img).unsqueeze(0).to(model_loader.device)
            return model_loader.predict(tensor)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        result = await asyncio.get_event_loop().run_in_executor(None, process_image)

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/classes")
async def get_classes():
    if not model_loader.is_loaded:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    return {"classes": model_loader.class_names}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)