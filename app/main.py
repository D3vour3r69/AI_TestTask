from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from PIL import Image
import io
import logging
import torchvision.transforms as transforms
import asyncio

from starlette.middleware.cors import CORSMiddleware

from app.model_loader import model_loader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ –û–ë–°–õ–£–ñ–ò–í–ê–ï–ú –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
transform = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])


@app.on_event("startup")
async def startup():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    logger.info("–ó–∞–ø—É—Å–∫ API...")
    model_loader.load_model()


# ‚úÖ –£–î–ê–õ–ò–õ –í–°–ï –°–¢–ê–†–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –ò –û–°–¢–ê–í–ò–õ –¢–û–õ–¨–ö–û –≠–¢–û–¢
@app.get("/")
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    try:
        # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
        with open("static/index.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        logger.info("HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω")
        return HTMLResponse(content=html_content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML
        return HTMLResponse(content="""
        <html>
            <head><title>CIFAR-10 Classifier</title></head>
            <body>
                <h1>üéØ CIFAR-10 –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
                <p>–§–∞–π–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª static/index.html —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
                <p>–û—à–∏–±–∫–∞: """ + str(e) + """</p>
            </body>
        </html>
        """)


@app.get("/health")
async def health():
    return {
        "status": "healthy" if model_loader.is_loaded else "error",
        "model_loaded": model_loader.is_loaded
    }


@app.post("/predict")
async def predict(image: UploadFile = File(...)):
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    if not model_loader.is_loaded:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    try:
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        contents = await image.read()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        def process_image():
            img = Image.open(io.BytesIO(contents)).convert('RGB')
            tensor = transform(img).unsqueeze(0).to(model_loader.device)
            return model_loader.predict(tensor)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        result = await asyncio.get_event_loop().run_in_executor(None, process_image)

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/classes")
async def get_classes():
    if not model_loader.is_loaded:
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    return {"classes": model_loader.class_names}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8001)